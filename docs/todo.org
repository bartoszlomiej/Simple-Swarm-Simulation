TODAY -*- mode: org -*-

* Majors:
  The problems concerning the most important tasks are shown below.

** TODO Phase 2 - Moving to the corner
   Main problems -> only one leader at time; leader switching; 

*** TODO Improvements
    In order to leave this phase certain improvements are to be introduced.
    
   
**** DONE Trespassing
     When robots are in the different AS's they sometimes permeating the other robots (especially, if some robots
     are already in phase 3, and phase 2 robots are going to them)
	  
**** TODO Rules
     - When robots are in the different phases than some rules are not obeyed:
       1. Robots of the higher phase cannot change to smaller phase until certain conditions occur (if robot is alone
	  it always go to phase 1)
       2. Robots of the lower phase (applies to phase 1 robots only) must join robots of the higher phase

**** TODO Movement improval - closeness
     *It is not that necessary, but it would be still a nice improvement though*
     
     Before starting the phase 2 it is recommend to test how the system will behave if we first order the robots to come
     closer to each other.

     The behavior of coming closer to the center of mass of the cluster could be observed in the test file, when
     in the SpotNeighbor function neighbor_check() the certain parameters where changed - basically oposite behavior to the one we wanted.

** TODO Phase 3 - creating superclasters
   There will be performed two approaches of creating superclusters and they will be compared
   1) Edge following approach
   2) Spiral motion approach
      
*** TODO Edge following superclustering
    when phase 3 is entered by all robots in the cluster => divide into two sub AS's
    One AS will go to the right, second one will go to the left. They are following the edge of the board.
    All robots encountered of lower phase or equal phase and lower AS number are to join the cluster. Otherwise, join the other cluster.
    Phase is being finished iff same AS robots will be encountered again.

    The AS of AS.id + 1 must know that it is a child - it will rejoing only with the cluster AS.id

    *Notation*
    - parent AS - AS of the id equal to AS.id
    - child AS - AS of the id equal to AS.id + 1
      
**** TODO Cluster division
     In order to make it easier to divide cluster into two parts, the newly created cluster will change its AS number to AS.id + 1

     *DIVISION*
     1) There will be used bisection to divide into two groups - the last robot from the AS changes it's AS number to AS.id + 1
     2) It tries to go to the border
     3) The next last robot, and no robot of the AS.id + 1 is being spotted in close range => do the same
     4) The process is being finished if other robot of the AS.id + 1 is being spotted in close range

**** TODO Line formation
     Line formation will be created as following:

     1) The leader is the robot which touches the edge of the board
     2) The leader gives the direction
     3) Other robots tries to keep as close to the 90 degree angle between the direction and the robot on the right/left (depending on the direction)
     4) Corners - When corner is being spotted, then there is a need for rearrangement -> The leader must change the direction, followers must play accordingly (to keep the 90 degree angle)

**** TODO Rejoining
     After spotting the AS of the child AS by the parent AS, there will be rejoinment - supercluster id will be set to the parent cluster AS
     
*** TODO Spiral motion superclustering
    Other approach for creation of the supercluster
    - When phase 3 is on go, the whole cluster starts to performe spiral motion. Similarly as in the previous approach, line formation is being prefered by now, however, other types of formations might be used as well -
      it is likely to happend, that the cluster will be to big to perform spiral motion in line -> then formations such as triangular formation or other flocking formation.
    - this movement will end when the leader will encounter the other same AS memeber - similarly as losing in the snake game.
    - then aggregation will be performed - robots will come closer to gather, to catch robots that might be inside them.
* Minors:
  Optional todos

** TODO **OPTIONAL**
   If no neighbors of the same AS are being spotted -> go to state 1
   (It should be applied if necessary in function update() of the Robot class)
   -The aim of that is to change the state of the "lost" robots to found another cluster
   
** TODO All collisions should be smooth

** TODO Make the change of speed easy to change
   after stop speed must be multiplied as initially given
   
   
* Other notes:
Notation used:
AS - autonomus system -> represents the cluster of robots

