TODAY -*- mode: org -*-

* Majors:
  Only necesities will be listed here

** DONE Timers
   Now it is a high time I create the timers that will allow to go to the phase 2

*** DONE Does # of neighbors change?
    Check periodically number of neighbors
    
   
*** DONE Broadcast message
    Broadcast message of the neighbor's timer value;
    Always propagate only the smallest value obtained

    
*** DONE Problem - how to propagate broadcast from the neighbor that is in the same AS only?
    1. Propagate AS as a member of a tuple Timer
    2. Check if a neighbor that propagates message is in the same AS
       + Actually, it might be much simpler to implement on the real hardware as here
	 I don't care who is sending the message (on the real hardware it probably the lasers will be used;
	 or sth else that could either send more extensive pieces of information)
    
*** DONE The second timer
    Add the second timer in order to synchronize the AS

*** DONE Aggregation changes
    there must be some switch off (after the transition to phase 2 occurs)

    -Solution - The number which can be incremented only -> will indicate the state
    

** TODO Phase 2 - collective movement
   Main problems -> only one leader at time; leader switching; movement detection?
   
*** TODO Leader starts moving

*** TODO Follower starts moving

**** TODO Movement detection

*** TODO Leader switching
    -Signal must be sent if leader cannot move further -> the leader will be chosen again.

* Minors:
  Optional todos

  
** DONE Improved collisions
   Robots should move in the random direction after collision (but it should be restricted angle
   -> at most 90 degrees between the point of collision)

** DONE AS improval - if no other member of AS is visible -> create new AS
   Important -> removes the robots that are outside of the given AS
   

** DONE Structure the program
   - extract classes to separet files


** TODO **OPTIONAL**
   If no neighbors of the same AS are being spotted -> go to state 1
   (It should be applied if necessary in function update() of the Robot class)
   -The aim of that is to change the state of the "lost" robots to found another cluster
   
** TODO All collisions should be smooth

** TODO Make the change of speed easy to change
   after stop speed must be multiplied as initially given
   
   
* Other notes:
Changing phase of work
[-] Border robot indication
  [-] Remember to make them resistant to "free electrons" -> the neighbor is a robot that don't move!
[-] Timer implementation
  [-] Adjusting AS ID to be ready to become counter
  [-] Prove that given counter is not random -> make it reasonable
[-] Broadcast phase change
  [-] Show the result (eg. change shape to triangle)

Notation used:
AS - autonomus system -> represents the cluster of robots

