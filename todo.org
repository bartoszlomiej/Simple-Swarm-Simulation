TODAY -*- mode: org -*-

* Majors:
  Only necesities will be listed here

** DONE Improved collisions
   Robots should move in the random direction after collision (but it should be restricted angle
   -> at most 90 degrees between the point of collision)

** DONE AS improval - if no other member of AS is visible -> create new AS
   Important -> removes the robots that are outside of the given AS
   

** DONE Structure the program
   - extract classes to separet files

** TODO Timers
   Now it is a high time I create the timers that will allow to go to the phase 2

*** DONE Does # of neighbors change?
    Check periodically number of neighbors
    
   
*** TODO Broadcast message
    Broadcast message of the neighbor's timer value;
    Always propagate only the smallest value obtained

    
*** DONE Problem - how to propagate broadcast from the neighbor that is in the same AS only?
    1. Propagate AS as a member of a tuple Timer
    2. Check if a neighbor that propagates message is in the same AS
       + Actually, it might be much simpler to implement on the real hardware as here
	 I don't care who is sending the message (on the real hardware it probably the lasers will be used;
	 or sth else that could either send more extensive pieces of information)
    
*** TODO Aggregation changes
    there must be some switch off (after the transition to phase 2 occurs)
    
*** TODO Further 
* Minors:
  Optional todos

** TODO All collisions should be smooth

** TODO Make the change of speed easy to change
   after stop speed must be multiplied as initially given
   
*** Other notes:
  Changing phase of work
  [-] Border robot indication
    [-] Remember to make them resistant to "free electrons" -> the neighbor is a robot that don't move!
  [-] Timer implementation
    [-] Adjusting AS ID to be ready to become counter
    [-] Prove that given counter is not random -> make it reasonable
  [-] Broadcast phase change
    [-] Show the result (eg. change shape to triangle)

  Notation used:
  AS - autonomus system -> represents the cluster of robots
